#!/usr/bin/perl -w

# OpenDocument validator, (C) 2006 Alex Hudson, GPLv2 or later.
# relies on:
#   unzip
#   xmllint
#   OpenDocument RelaxNG schemas (included)

use strict;
use Getopt::Long;

my $strict = 0;
my $file = '';
GetOptions('strict' => \$strict, 'file=s' => \$file);

my ($warnings, $errors) = (0, 0);

if ($file eq '') {
	print <<"_OPTS_";
Usage: $0 --file=<OpenDocument File> [--strict]
_OPTS_
	exit 1;
}

die "ERROR: I cannot read $file\n" unless (-f $file);
$file =~ s/(\s)/\\$1/g if ($file =~ /\s/);

# setup some data structures
my %uris;
my %mimes;
my %exts;
{
	my @odf_uris = qw(office meta config text table drawing
		presentation dr3d animation chart form script
		style datastyle manifest);
	map { $_ = "urn:oasis:names:tc:opendocument:xmlns:$_:1.0"; } @odf_uris;
	my @compat_uris = qw(xsl-fo svg smil);
	map { $_ = "urn:oasis:names:tc:opendocument:xmlns:$_-compatible:1.0"; }
		@compat_uris;
	my @extern_uris = qw(
		http://purl.org/dc/elements/1.1/
		http://www.w3.org/1999/xlink
		http://www.w3.org/1998/Math/MathML
		http://www.w3.org/2002/xforms
	);
	$uris{$_}++ foreach (@odf_uris, @compat_uris, @extern_uris);
	my %odf_mimes = ('text' => 't', 'graphics' => 'g', 
		'presentation' => 'p', 'spreadsheet' => 's', 
		'chart' => 'c', 'image' => 'i', 'formula' => 'f',
		'text-master' => 'm', 'text-web' => 'h');
	foreach my $mime (keys %odf_mimes) {
		my $ext = $odf_mimes{$mime};
		my $true_mime = "application/vnd.oasis.opendocument.$mime";
		my $true_ext = 'od' . $ext;
		$mimes{$true_mime} = $true_ext;
		$exts{$true_ext} = $true_mime;
		if ($mime !~ /text-/) {
			$true_mime .= '-template';
			$true_ext = 'ot' . $ext;
			$mimes{$true_mime} = $true_ext;
			$exts{$true_ext} = $true_mime;
		}
	}
}

# check the contents of the Zip file.
my @zipinfo = `unzip -l $file`;
my %fileinfo;
foreach my $file (@zipinfo) {
	if ($file =~ /\s(\d+)\s+\d\d-\d\d-\d\d\s+\d\d:\d\d\s+(.*)$/) {
		my ($size, $filename) = ($1, $2);
		$fileinfo{$filename} = $size;
	}
}

# check for a mime type
if (! defined $fileinfo{'mimetype'}) {
	warning('does not contain a mimetype. This is a SHOULD in OpenDocument 1.0');
} else {
	my ($ext) = ($file =~ /\.([^\.]+)$/);
	my $mimetype = `unzip -p $file mimetype`;

	my $proposed_ext = '';
	if (! exists $mimes{$mimetype}) {
		error("mimetype '$mimetype' is not defined by OpenDocument 1.0");
	} else {
		$proposed_ext = $mimes{$mimetype};
	}
	if ((! defined $ext) || ($ext eq '')) {
		if ($proposed_ext ne '') {
			error("filename should have an OpenDocument extension");
		} else {
			error("filename missing OpenDocument .$proposed_ext extension");
		}
	}
	if (! defined $exts{$ext}) {
		error("file extension '$ext' not defined in OpenDocument");
	}
	if (($ext ne $proposed_ext) && ($proposed_ext ne '')) {
		my $proposed_mime = $exts{$ext};
		error("file extension $ext disagrees with file mimetype $mimetype");
		solution("change extension to $proposed_ext");
		solution("change mime type to $proposed_mime") if (defined $proposed_mime);
	}
}

# validate the manifest
my $mfile = 'META-INF/manifest.xml';
if (defined $fileinfo{$mfile}) {
	validate($file, $mfile, 'OpenDocument-manifest-schema-v1.0-os.rng');
} else {
	error('does not contain a manifest.'); # is this a JAR thing, or what?
}

# validate the XML contents
my $schema = $strict?	'OpenDocument-strict-schema-v1.0-os.rng' :
			'OpenDocument-schema-v1.0-os.rng';

my @xmlfiles = ('content.xml', 'styles.xml', 'settings.xml', 'meta.xml');
foreach my $xmlfile (@xmlfiles) {
	if (defined $fileinfo{$xmlfile}) {
		validate($file, $xmlfile, $schema);
		other_xml_checks($file, $xmlfile);
	} else {
		error("missing required file $xmlfile");
	}
}

summary_and_exit();

## that's it, we're done :)

sub validate {
	my ($file, $subfile, $schema) = @_;
	my @result = `unzip -p $file $subfile | xmllint --nonet --relaxng $schema - 2>&1 1>/dev/null`;
	map { 
		s/^\s?-[:|\s]?//; 
		s/Relax-NG validity error\s+:\s+//;
		chomp $_; 
	} @result;
	if ($result[0] ne 'validates') {
		pop @result; # this is just 'file .. doesn't validate' error we're losing
		error("$subfile:$_") foreach(@result);
	}
}

sub other_xml_checks {
	my ($file, $subfile) = @_;
	my $content = '';
	{ 
		local $/;
		$content = `unzip -p $file $subfile`;
	}
	my %saw = ($content =~ m/xmlns:(.*?)="([^\"]+)"/gms);
	foreach my $ns (keys %saw) {
		# remove OpenDocument name spaces
		my $uri = $saw{$ns};
		if (exists $uris{$uri}) {
			delete $saw{$ns};
		}
	}
	# look at non-OpenDocument name spaces
	foreach my $ns (keys %saw) {
		my $uri = $saw{$ns};
		my @uses = ($content =~ m/[<|\s]$ns:/gms);
		my $use = $#uses;
		if ($use > 0) {
			warning("$subfile: non-ODF xmlns $ns ($uri) used $use time(s)");
		}
	}
}

sub warning {
	my ($text) = @_;
	# we may want to optionally disable warnings.
	print "WARNING: $text\n";
	$warnings++;
}

sub error {
	my ($text) = @_;
	print "ERROR: $text\n";
	$errors++;
}

sub solution {
	my ($text) = @_;
	print "Solution: $text\n";
}

sub summary_and_exit {
	print "$warnings warning(s), $errors error(s)\n";
	my $is_valid = ($errors > 0);
	my $result = $is_valid? ' not' : '';
	print "Document does$result validate\n";
	exit $is_valid;
}
